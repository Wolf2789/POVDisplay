#include <Wire.h>

int IR = 0;
byte IR_countdown = 0;
#define IR_THRESHOLD 900
#define IR_PIN_1 A2
bool doReset = true;
byte currentStep = 0;
enum LedState { OFF = 0, ON = 1 };

class Display {
  private:
    static byte expander[];
    static byte remap[][8];
    static byte LEDs[];
  public:
    static void Update();
    static void SetLEDs(byte expander, byte LEDs);
    static void TurnLEDs(byte expander, byte LEDs, LedState state);
};

byte Display::expander[2] = { 0x21, 0x38 };
byte Display::remap[][8] = { {3,2,1,0,7,6,5,4}, {1,2,3,7,6,5,4,0} };
byte Display::LEDs[] = { 0, 0 };

void Display::SetLEDs(byte expander, byte LEDs) {
  Display::LEDs[expander] = LEDs;
}

void Display::TurnLEDs(byte expander, byte LEDs, LedState state) {
  if (state == ON)
    Display::LEDs[expander] |= LEDs;
  else
    Display::LEDs[expander] &= ~LEDs;
}

void Display::Update() {
  for (byte i = 0; i < 2; i++) {
    Wire.beginTransmission(Display::expander[i]);
    Wire.write(~Display::LEDs[i]); // we're expecting 255 to be all on, but to expander it means all off, so we need to invert our value
    Wire.endTransmission();
  }
}

void setup() {
  Wire.begin();
}

byte FONT[][5][2] {
  { // UNKNOWN
    {B10000001,B00000000},{B00000010,B00000000},{B00000010,B10000110},{B00100010,B00000000},{B11000001,B00000000}
  },{ // A
    {B11100001,B10001110},{B00100010,B00000000},{B00100010,B00000000},{B00100010,B00000000},{B11100001,B10001110}
  },{ // B
    {B11100011,B10001110},{B00100010,B10000000},{B00100010,B10000000},{B00100010,B10000000},{B11000001,B00001110}
  },{ // C
    {B11100001,B00001110},{B00000010,B10000000},{B00000010,B10000000},{B00000010,B10000000},{B10000001,B00001000}
  },{ // D
    {B11100011,B10001110},{B00000010,B10000000},{B00000010,B10000000},{B00000010,B10000000},{B11100001,B00001110}
  },{ // E
    {B11100011,B10001110},{B00100010,B10000000},{B00100010,B10000000},{B00000010,B10000000},{B00000010,B10000000}
  },{ // F
    {B11100011,B10001110},{B00100010,B00000000},{B00100010,B00000000},{B00000010,B00000000},{B00000010,B00000000}
  },{ // G
    {B11100001,B00001110},{B00000010,B10000000},{B00100010,B10000000},{B00100010,B10000000},{B00100001,B00001110}
  },{ // H
    {B11100011,B10001110},{B00100000,B00000000},{B00100000,B00000000},{B00100000,B00000000},{B11100011,B10001110}
  },{ // I
    {B00000010,B10000000},{B00000010,B10000000},{B11100011,B10001110},{B00000010,B10000000},{B00000010,B10000000}
  },{ // J
    {B00000010,B00001100},{B00000010,B10000000},{B00000010,B10000000},{B00000010,B10000000},{B11100011,B00001110}
  },{ // K
    {B11100011,B10001110},{B00100000,B00000000},{B01100000,B00000000},{B10000000,B00000010},{B00000011,B10001100}
  },{ // L
    {B11100011,B10001110},{B00000000,B10000000},{B00000000,B10000000},{B00000000,B10000000},{B00000000,B10000000}
  },{ // M
    {B11100011,B10001110},{B10000000,B00000000},{B01100000,B00000000},{B10000000,B00000000},{B11100011,B10001110}
  },{ // N
    {B11100011,B10001110},{B10000001,B00000000},{B01100000,B00000000},{B00000000,B00000110},{B11100011,B10001110}
  },{ // O
    {B11100001,B00001110},{B00000010,B10000000},{B00000010,B10000000},{B00000010,B10000000},{B11100001,B00001110}
  },{ // P
    {B11100011,B10001110},{B00100010,B00000000},{B00100010,B00000000},{B00100010,B00000000},{B11000001,B00000000}
  },{ // Q
    {B11100001,B00001110},{B00000010,B10000000},{B00000010,B10000100},{B00000010,B00001000},{B11100001,B10000110}
  },{ // R
    {B11100011,B10001110},{B00100010,B00000000},{B00100010,B00000000},{B00100010,B00000000},{B11000001,B10001110}
  },{ // S
    {B11000001,B00001000},{B00100010,B10000000},{B00100010,B10000000},{B00100010,B10000000},{B10000001,B00001110}
  },{ // T
    {B00000011,B00000000},{B00000010,B00000000},{B11100011,B10001110},{B00000010,B00000000},{B00000011,B00000000}
  },{ // U
    {B11100011,B00001110},{B00000000,B10000000},{B00000000,B10000000},{B00000000,B10000000},{B11100011,B00001110}
  },{ // V
    {B11100011,B00000110},{B00000000,B00001000},{B00000000,B10000000},{B00000000,B00001000},{B11100011,B00000110}
  },{ // W
    {B11100011,B10001110},{B00000000,B00001100},{B00000000,B00000110},{B00000000,B00001100},{B11100011,B10001110}
  },{ // X
    {B00000011,B10001000},{B10000000,B00000110},{B01100000,B00000000},{B10000000,B00000110},{B00000011,B10001000}
  },{ // Y
    {B00000011,B00000000},{B10000000,B00000000},{B01100000,B10001110},{B10000000,B00000000},{B00000011,B00000000}
  },{ // Z
    {B00000011,B10001100},{B00000010,B10000010},{B00100010,B10000000},{B01000010,B10000000},{B10000011,B10001000}
  },{ // a
    {B00000000,B00001110},{B00100000,B10000000},{B00100000,B10000000},{B00100000,B00001000},{B00000000,B10001110}
  },{ // b
    {B11100011,B00001110},{B00100000,B10000000},{B00100000,B10000000},{B00100000,B10000000},{B00000000,B00001110}
  },{ // c
    {B00000000,B00001110},{B00100000,B10000000},{B00100000,B10000000},{B00100000,B10000000},{B00000000,B00001010}
  },{ // d
    {B00000000,B00001110},{B00100000,B10000000},{B00100000,B10000000},{B00100000,B10000000},{B11100011,B00001110}
  },{ // e
    {B00000000,B00001110},{B00100000,B10000100},{B00100000,B10000100},{B00100000,B10000100},{B00000000,B00000110}
  },{ // f
    {B00000000,B00001010},{B11100001,B11101110},{B00100010,B00001000},{B01000010,B00001000},{B10000001,B00000000}
  },{ // g
    {B00000000,B00001110},{B00100000,B10100000},{B00100000,B11010000},{B00100000,B10010000},{B00000000,B11101110}
  },{ // h
    {B11100011,B10001110},{B00100000,B00000000},{B00100000,B00000000},{B00100000,B00000000},{B00000000,B10001110}
  },{ // i
    {B00000000,B00000000},{B00000000,B00000000},{B01000000,B10001110},{B00000000,B00000000},{B00000000,B00000000}
  },{ // j
    {B00000000,B01100000},{B00000000,B10010000},{B01000000,B11101110},{B00000000,B00001000},{B00000000,B00000000}
  },{ // k
    {B11100011,B10001110},{B00000000,B00000100},{B00000000,B00000100},{B00000000,B00000110},{B00100000,B10001000}
  },{ // l
    {B11100011,B00001110},{B00000000,B10000000},{B00000000,B10000000},{B00000000,B10000000},{B00000000,B00001000}
  },{ // m
    {B00100000,B10001110},{B00100000,B00000000},{B00000000,B00000010},{B00100000,B00000000},{B00000000,B10001110}
  },{ // n
    {B00100000,B10001110},{B00100000,B00000000},{B00100000,B00000000},{B00100000,B00000000},{B00000000,B10001110}
  },{ // o
    {B00000000,B00001110},{B00100000,B10000000},{B00100000,B10000000},{B00100000,B10000000},{B00000000,B00001110}
  },{ // p
    {B00000000,B11111110},{B00100000,B10000000},{B00100000,B10000000},{B00100000,B10000000},{B00000000,B00001110}
  },{ // q
    {B00000000,B00001110},{B00100000,B10000000},{B00100000,B10000000},{B00100000,B10000000},{B00000000,B11111110}
  },{ // r
    {B00100000,B00000000},{B00000000,B10001110},{B00100000,B00000000},{B00100000,B00000000},{B00000000,B00000010}
  },{ // s
    {B00000000,B10000010},{B00100000,B10000100},{B00100000,B10000100},{B00100000,B10000100},{B00000000,B00001000}
  },{ // t
    {B00000000,B00000000},{B01000000,B00000000},{B11100011,B10001110},{B01000000,B00000000},{B00000000,B00000000}
  },{ // u
    {B00100000,B00001110},{B00000000,B10000000},{B00000000,B10000000},{B00000000,B10000000},{B00100000,B10001110}
  },{ // v
    {B00100000,B00000110},{B00000000,B00001000},{B00000000,B10000000},{B00000000,B00001000},{B00100000,B00000110}
  },{ // w
    {B00100000,B00001110},{B00000000,B10000000},{B00000000,B00001100},{B00000000,B10000000},{B00100000,B00001110}
  },{ // x
    {B00100000,B10000000},{B00000000,B00001010},{B00000000,B00000100},{B00000000,B00001010},{B00100000,B10000000}
  },{ // y
    {B00100000,B00001110},{B00000000,B10100000},{B00000000,B11010000},{B00000000,B10010000},{B00100000,B11101110}
  },{ // z
    {B00100000,B10000000},{B00100000,B10001000},{B00100000,B10000100},{B00100000,B10000010},{B00100000,B10000000}
  },{ // 0
    {B11100001,B00001110},{B10000011,B10000000},{B01100010,B10000010},{B00000010,B10001100},{B11100001,B00001110}
  },{ // 1
    {B10000000,B10000000},{B00000001,B10000000},{B11100011,B10001110},{B00000000,B10000000},{B00000000,B10000000}
  },{ // 2
    {B10000001,B10001000},{B00000010,B10000100},{B00000010,B10000010},{B00100010,B10000000},{B11000001,B10000000}
  },{ // 3
    {B00000001,B00001000},{B00000010,B10000000},{B00100010,B10000000},{B00100010,B10000000},{B11000001,B00001110}
  },{ // 4
    {B00100000,B00000010},{B11000000,B00000010},{B00000001,B00000010},{B11100011,B10001110},{B00000000,B00000010}
  },{ // 5
    {B11100011,B00001000},{B01000010,B10000000},{B01000010,B10000000},{B01000010,B10000000},{B00100010,B00001110}
  },{ // 6
    {B11100001,B00001110},{B00100010,B10000000},{B00100010,B10000000},{B00100010,B10000000},{B10000001,B00001110}
  },{ // 7
    {B00000011,B00000000},{B00000010,B00000000},{B00100010,B10001110},{B01000010,B00000000},{B10000011,B00000000}
  },{ // 8
    {B11000001,B00001110},{B00100010,B10000000},{B00100010,B10000000},{B00100010,B10000000},{B11000001,B00001110}
  },{ // 9
    {B11000001,B00001100},{B00100010,B10000000},{B00100010,B10000000},{B00100010,B10000000},{B11100001,B00001110}
  }
};

byte FONT_MAPPING[] = {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,54,55,56,57,58,59,60,61,62, // 0-9
0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26, // A-Z
0,0,0,0,0,0,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52, // a-z
};

#define MAX_STEPS 130
#define ANIMATION_SPEED 200
#define ANIMATION_OUTLINE FALSE
#define textToDisplay "Hello World! sadf"
byte textLen = sizeof(textToDisplay) - 1;
int textLenWidth = textLen * 6;
int position = 0;
byte positionCountdown = 0;
byte iText, iChar;

void loop() {
  IR = analogRead(IR_PIN_1);
  if (IR_countdown > 0)
    IR_countdown--;
  else {
    if (IR > IR_THRESHOLD)
      doReset = true;
    else if (doReset) {
      doReset = false;
      currentStep = 0;
      IR_countdown = 10;
    }
  }

  iText = (step - (MAX_STEPS + textLenWidth - position));
  iChar = iText % 6;
  iText /= 6;

  Display::SetLEDs(0, 0);
  Display::SetLEDs(1, 0);

  if (iText >= 0 && iText < textLen && iChar >= 0 && iChar < 5)
    if (textToDisplay[iText] != 32) {
      Display::SetLEDs(0, FONT[ FONT_MAPPING[textToDisplay[iText]] ][iChar][0]);
      Display::SetLEDs(1, FONT[ FONT_MAPPING[textToDisplay[iText]] ][iChar][1]);
    }

  if (ANIMATION_OUTLINE)
    Display::TurnLEDs(0, 8, ON);

  if ((positionCountdown = (positionCountdown + 1) % ANIMATION_SPEED) == 0)
    position = (position + 1) % (MAX_STEPS + textLenWidth * 2);

  Display::Update();
  if ((currentStep += 1) >= MAX_STEPS) {
    Display::SetLEDs(0, 0);
    Display::SetLEDs(1, 0);
    Display::Update();
  }
}